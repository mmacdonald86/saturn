read -r -d '' USAGE <<'EOF'
Usage:
    bash build.sh mars-master|mars-nightly
EOF


set -o nounset
set -o pipefail

thisfile="${BASH_SOURCE[0]}"
thisdir="$( cd "$( dirname "${thisfile}" )" && pwd )"

if [[ $# < 1 ]]; then
    echo "${USAGE}"
    exit 1
fi

task="$1"
echo
read -p 'Your github username: ' username
read -sp 'Your github password: ' passwd
echo
gituser=${username}:${passwd}

if [[ "${task}" == "mars-master" ]]; then
    #MARS_VERSION=$(python -c "$(curl --user ${gituser} -s https://raw.githubusercontent.com/xadrnd/mars/master/mars/version.py); print(full)")
    MARS_VERSION=$(tail -n 1 $(dirname $(dirname ${thisdir}))/version)
    MARS_VERSION=${MARS_VERSION#mars }
    MARS_URL=https://github.com/xadrnd/mars/archive/v${MARS_VERSION}.tar.gz
    curl --user ${gituser} -skL --retry 3 ${MARS_URL} -o mars.tar.gz
    name=saturn-master
elif [[ "${task}" == "mars-nightly" ]]; then
    MARS_URL=https://github.com/xadrnd/mars/archive/develop.zip
    curl --user ${gituser} -skL --retry 3 ${MARS_URL} -o mars.zip
    name=saturn-dev
else
    echo "${USAGE}"
    exit 1
fi
version="$(date +%Y%m%d)"


echo "${name}" > "${thisdir}"/name
echo "${version}" > "${thisdir}"/version
NAME="${name}":"${version}"

parent_name="$(curl -skL https://raw.githubusercontent.com/zpz/docker/master/py3/name | cat)"
parent_version="$(curl -skL https://raw.githubusercontent.com/zpz/docker/master/py3/version | cat)"
PARENT="${parent_name}":"${parent_version}"

echo
echo Creating Dockerfile for ${NAME}
cat > "${thisdir}"/Dockerfile <<EOF
# Dockerfile for image '${NAME}'
# Generated by 'build.sh'.

FROM ${PARENT}
USER root

EOF

if [[ "${task}" == "mars-master" ]]; then
    cat >> "${thisdir}/Dockerfile" <<EOF
COPY mars.tar.gz /tmp/
RUN cd /tmp \\
    && tar -xzf mars.tar.gz \\
    && mv mars-${MARS_VERSION} mars

EOF
else
    cat >> "${thisdir}/Dockerfile" <<EOF
COPY mars.zip /tmp/
RUN cd /tmp \\
    && unzip mars.zip \\
    && mv mars-develop mars

EOF
fi

cat >> "${thisdir}"/Dockerfile <<'EOF'
ARG ASTYLE_VERSION=3.1
ARG ASTYLE_URL=https://sourceforge.net/projects/astyle/files/astyle/astyle%20${ASTYLE_VERSION}/astyle_${ASTYLE_VERSION}_linux.tar.gz/download

ARG RAPIDJSON_VERSION=1.1.0
ARG RAPIDJSON_URL=https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz
ARG AVRO_VERSION=1.8.2
ARG AVRO_URL=http://apache.claz.org/avro/avro-${AVRO_VERSION}/avro-src-${AVRO_VERSION}.tar.gz

RUN echo "deb http://ftp.us.debian.org/debian testing main contrib non-free" >> /etc/apt/sources.list \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc-7 \
        g++-7 \
        libc6-dev \
        cmake \
        make \
    && ln -s /usr/bin/gcc-7 /usr/bin/gcc \
    && ln -s /usr/bin/g++-7 /usr/bin/g++ \
    \
    && curl -skL --retry 3 ${RAPIDJSON_URL} | tar xz -C /tmp \
    && mv /tmp/rapidjson-${RAPIDJSON_VERSION}/include/rapidjson /usr/local/include \
    \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        libboost-dev \
        libboost-regex-dev \
        libboost-filesystem-dev \
        libboost-iostreams-dev \
        libboost-system-dev \
        libboost-program-options-dev \
        flex \
        bison \
    && curl -skL --retry 3 ${AVRO_URL} | tar xz -C /tmp \
    && ( cd /tmp/avro-src-${AVRO_VERSION}/lang/c++ && ./build.sh test && ./build.sh install ) \
    && apt-get purge -y --auto-remove \
        flex \
        bison \
    \
    && curl -skL --retry 3 ${ASTYLE_URL} | tar xz -C /tmp \
    && cd /tmp/astyle/build/gcc \
    && make \
    && mv bin/astyle /usr/local/bin \
    \
    && cp -r /tmp/mars/include/mars /usr/local/include \
    && cp /tmp/mars/mars/version.py /usr/local/include/mars \
    \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* /tmp/*
EOF

echo
echo Building image "'${NAME}'"
echo
docker build -t "${NAME}" "${thisdir}"
echo


python $( dirname "${thisdir}" )/pyinstall.py \
    --imgname=${name} \
    --imgversion=${version} \
    --cmd=${name}

rm -f mars.tar.gz mars.zip
rm -f "${thisdir}/name" "${thisdir}/version" "${thisdir}/Dockerfile"
