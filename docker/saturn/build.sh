read -r -d '' USAGE <<'EOF'
Usage:
    bash build.sh master|nightly [push]
    bash build.sh dev
EOF


set -o nounset
set -o pipefail

thisfile="${BASH_SOURCE[0]}"
thisdir="$( cd "$( dirname "${thisfile}" )" && pwd )"

if [[ $# < 1 ]]; then
    echo "${USAGE}"
    exit 1
fi

task="$1"
if [[ "${task}" == "master" ]] || [[ "${task}" == "nightly" ]]; then
    echo
    read -p 'Your github username: ' username
    read -sp 'Your github password: ' passwd
    echo
    gituser=${username}:${passwd}

    if [[ "${task}" == "master" ]]; then
        SATURN_VERSION=$(cat "$(curl --user ${gituser} -s https://raw.githubusercontent.com/xadrnd/saturn/master/include/saturn/version)")
        SATURN_URL=https://github.com/xadrnd/saturn/archive/v${SATURN_VERSION}.tar.gz
        curl --user ${gituser} -skL --retry 3 ${MARS_URL} -o saturn.tar.gz
        name=saturn
        version=${SATURN_VERSION}
    else
        SATURN_URL=https://github.com/xadrnd/saturn/archive/develop.zip
        curl --user ${username}:${passwd} -skL --retry 3 ${SATURN_URL} -o saturn.zip
        name=saturn-nightly
        version=$(date +%Y%m%d)
    fi

    if [[ $# > 1 ]]; then
        push="$2"
    else
        push=""
    fi
else
    if [[ "${task}" != "dev" ]]; then
        echo "${USAGE}"
        exit 1
    fi
    name=saturn-dev
    version="$(date +%Y%m%d)"
fi


echo "${name}" > "${thisdir}"/name
echo "${version}" > "${thisdir}"/version
NAME="${name}":"${version}"

parent_name="$(curl -skL https://raw.githubusercontent.com/zpz/docker/master/py3/name | cat)"
parent_version="$(curl -skL https://raw.githubusercontent.com/zpz/docker/master/py3/version | cat)"
PARENT="${parent_name}":"${parent_version}"

echo
echo Creating Dockerfile for ${NAME}
cat > "${thisdir}"/Dockerfile <<EOF
# Dockerfile for image '${NAME}'
# Generated by 'build.sh'.

FROM ${PARENT}
USER root

EOF

cat >> "${thisdir}"/Dockerfile <<'EOF'

EOF

if [[ "${name}" == "saturn" ]]; then
    cat >> "${thisdir}/Dockerfile" <<EOF
    COPY saturn.tar.gz /tmp/
    RUN cd /tmp \
        && tar -xzf saturn.tar.gz \\
        && mv saturn-${SATURN_VERSION} saturn-code
EOF
elif [[ "${name}" == "saturn-nightly" ]]; then
    cat >> "${thisdir}/Dockerfile" <<EOF
    COPY saturn.zip /tmp/
    RUN cd /tmp \
        && unzip saturn.zip \\
        && mv saturn-develop saturn-code
EOF
else
    cat >> "${thisdir}/Dockerfile" <<'EOF'
    ARG ASTYLE_VERSION=3.1
    ARG ASTYLE_URL=https://sourceforge.net/projects/astyle/files/astyle/astyle%20${ASTYLE_VERSION}/astyle_${ASTYLE_VERSION}_linux.tar.gz/download
EOF
fi

cat >> "${thisdir}"/Dockerfile <<'EOF'

ARG RAPIDJSON_VERSION=1.1.0
ARG RAPIDJSON_URL=https://github.com/Tencent/rapidjson/archive/v${RAPIDJSON_VERSION}.tar.gz
ARG AVRO_VERSION=1.8.2
ARG AVRO_URL=http://apache.claz.org/avro/avro-${AVRO_VERSION}/avro-src-${AVRO_VERSION}.tar.gz

RUN echo "deb http://ftp.us.debian.org/debian testing main contrib non-free" >> /etc/apt/sources.list \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc-7 \
        g++-7 \
        libc6-dev \
        cmake \
        make \
    && ln -s /usr/bin/gcc-7 /usr/bin/gcc \
    && ln -s /usr/bin/g++-7 /usr/bin/g++ \
    \
    && curl -skL --retry 3 ${RAPIDJSON_URL} | tar xz -C /tmp \
    && mv /tmp/rapidjson-${RAPIDJSON_VERSION}/include/rapidjson /usr/local/include \
    \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        libboost-dev \
        libboost-regex-dev \
        libboost-filesystem-dev \
        libboost-iostreams-dev \
        libboost-system-dev \
        libboost-program-options-dev \
        flex \
        bison \
    && curl -skL --retry 3 ${AVRO_URL} | tar xz -C /tmp \
    && ( cd /tmp/avro-src-${AVRO_VERSION}/lang/c++ && ./build.sh test && ./build.sh install ) \
    && apt-get purge -y --auto-remove \
        flex \
        bison \
    \
EOF

if [[ "${name}" == "saturn-dev" ]]; then
    cat >> "${thisdir}"/Dockerfile <<'EOF'
    && curl -skL --retry 3 ${ASTYLE_URL} | tar xz -C /tmp \
    && cd /tmp/astyle/build/gcc \
    && make \
    && mv bin/astyle /usr/local/bin \
    \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* /tmp/*
EOF
else
    cat >> "${thisdir}"/Dockerfile <<'EOF'
    && cd /tmp/saturn-code \
    && cp -r install/saturn /usr/local/include \
    \
    && apt-get remove --purge -y \
        gcc-7 g++-7 make cmake \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* /tmp/*
EOF
fi

echo
echo Building image "'${NAME}'"
echo
docker build -t "${NAME}" "${thisdir}"
echo


if [[ "${name}" == "saturn" ]] || [[ "${name}" == "saturn-nightly" ]]; then
    rm -f saturn.tar.gz mars.zip

    if [[ "${push}" == "push" ]]; then
        TAG=${ECR_URL}/mars/${NAME}

        docker tag ${NAME} ${TAG}
        $(aws ecr get-login --no-include-email --region us-east-1)

        echo Pushing ${TAG} to AWS
        docker push ${TAG}

        rm -f "${thisdir}/name" "${thisdir}/version" "${thisdir}/Dockerfile"
    fi
else
    python $( dirname "${thisdir}" )/pyinstall.py \
        --imgname=${name} \
        --imgversion=${version} \
        --cmd=${name}

    # TODO:
    # `ln -s ~/work/src/mars/include/mars /usr/local/include/mars`
    # at startup.

    rm -f "${thisdir}/name" "${thisdir}/version" "${thisdir}/Dockerfile"
fi
